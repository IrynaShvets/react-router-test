{"version":3,"file":"static/js/Cast.1216ad24.chunk.js","mappings":"qRAEaA,EAAQC,EAAAA,GAAAA,IAAH,+DAILC,EAAOD,EAAAA,GAAAA,GAAH,wHAOJE,EAAOF,EAAAA,GAAAA,EAAH,4CAGJG,EAAOH,EAAAA,GAAAA,GAAH,gDAGJI,EAAUJ,EAAAA,GAAAA,IAAH,qE,SChBL,SAASK,EAAT,GAAkD,IAA9BC,EAA6B,EAA7BA,KAAMC,EAAuB,EAAvBA,UAAWC,EAAY,EAAZA,SAClD,OACE,UAACP,EAAD,YACE,SAACF,EAAD,CAAOU,IAAKD,EAAUE,IAAKJ,KAC3B,UAACF,EAAD,YACE,SAACD,EAAD,UAAOG,KACP,UAACJ,EAAD,yBAAkBK,W,wBCDX,SAASI,IACtB,OAAwBC,EAAAA,EAAAA,UAAS,MAAjC,eAAOC,EAAP,KAAaC,EAAb,KACA,GAAkCF,EAAAA,EAAAA,WAAS,GAA3C,eAAOG,EAAP,KAAkBC,EAAlB,KACQC,GAAYC,EAAAA,EAAAA,MAAZD,QAkBR,OAfAE,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAS,mCAAG,2FAChBJ,GAAa,GADG,mBAGKK,EAAAA,EAAAA,IAAmBJ,GAHxB,OAGRK,EAHQ,OAIdR,EAAQQ,EAAKT,MAJC,gDAMdU,EAAAA,GAAAA,MAAY,oBANE,yBAQdP,GAAa,GARC,4EAAH,qDAWfI,MACC,CAACH,IAEGF,GACL,SAACS,EAAA,EAAD,MAEEX,IACA,wBACGA,EAAKY,KAAI,gBAAGC,EAAH,EAAGA,GAAIpB,EAAP,EAAOA,KAAMC,EAAb,EAAaA,UAAWoB,EAAxB,EAAwBA,aAAxB,OACR,SAACtB,EAAD,CAEEC,KAAMA,EACNC,UAAWA,EACXC,SACEmB,EAAY,UA5BL,sCA4BK,YAAoBA,GAAiBC,GAJ9CF,U,0MClCXG,EAAU,mCACVC,EAAW,gCAEJC,EAAmB,mCAAG,WAAMC,GAAN,uFACVC,IAAAA,IAAA,UAClBH,EADkB,uCACqBD,EADrB,iBACqCG,IAF3B,cAC3BE,EAD2B,yBAI1BA,EAASZ,MAJiB,2CAAH,sDAOnBa,EAAW,mCAAG,WAAOC,EAAOJ,GAAd,uFACFC,IAAAA,IAAA,UAClBH,EADkB,gCACcD,EADd,kBAC+BO,EAD/B,iBAC6CJ,IAF3C,cACnBE,EADmB,yBAKlBA,EAASZ,MALS,2CAAH,wDAQXe,EAAe,mCAAG,WAAMX,GAAN,uFACNO,IAAAA,IAAA,UAAaH,EAAb,iBAA8BJ,EAA9B,oBAA4CG,IADtC,cACvBK,EADuB,yBAGtBA,EAASZ,MAHa,2CAAH,sDAMfD,EAAkB,mCAAG,WAAMK,GAAN,uFACTO,IAAAA,IAAA,UAClBH,EADkB,iBACDJ,EADC,4BACqBG,IAFZ,cAC1BK,EAD0B,yBAKzBA,EAASZ,MALgB,2CAAH,sDAQlBgB,EAAqB,mCAAG,WAAMZ,GAAN,uFACZO,IAAAA,IAAA,UAClBH,EADkB,iBACDJ,EADC,4BACqBG,IAFT,cAC7BK,EAD6B,yBAK5BA,EAASZ,MALmB,2CAAH,uD","sources":["components/Cast/CastItem/CastItem.styled.js","components/Cast/CastItem/CastItem.js","components/Cast/Cast.js","services/moviesApi.js"],"sourcesContent":["import styled from 'styled-components';\r\n\r\nexport const Image = styled.img`\r\n  width: 60px;\r\n  margin-right: 20px;\r\n`;\r\nexport const Item = styled.li`\r\n  display: flex;\r\n  align-items: center;\r\n  :not(:last-child) {\r\n    margin-bottom: 10px;\r\n  }\r\n`;\r\nexport const Text = styled.p`\r\n  font-size: 16px;\r\n`;\r\nexport const Name = styled.h3`\r\n  margin-bottom: 10px;\r\n`;\r\nexport const Wrapper = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n`;\r\n","import PropTypes from 'prop-types';\r\nimport { Item, Wrapper, Image, Text, Name } from './CastItem.styled';\r\n\r\nexport default function CastItem({ name, character, imageUrl }) {\r\n  return (\r\n    <Item>\r\n      <Image src={imageUrl} alt={name} />\r\n      <Wrapper>\r\n        <Name>{name}</Name>\r\n        <Text>Character: {character}</Text>\r\n      </Wrapper>\r\n    </Item>\r\n  );\r\n}\r\nCastItem.propTypes = {\r\n  name: PropTypes.string.isRequired,\r\n  character: PropTypes.string.isRequired,\r\n  imageUrl: PropTypes.string.isRequired,\r\n};\r\n","import { useState, useEffect } from 'react';\r\nimport { useParams } from 'react-router-dom';\r\nimport toast from 'react-hot-toast';\r\nimport { fetchCastByMovieId } from '../../services/moviesApi';\r\nimport CastItem from './CastItem/CastItem';\r\nimport DefaultImage from '../../images/avatar.jpg';\r\nimport Loader from '../Loader';\r\n\r\nexport default function Cast() {\r\n  const [cast, setCast] = useState(null);\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const { movieId } = useParams();\r\n  const ImgBaseURL = 'https://image.tmdb.org/t/p/original';\r\n\r\n  useEffect(() => {\r\n    const fetchCast = async () => {\r\n      setIsLoading(true);\r\n      try {\r\n        const data = await fetchCastByMovieId(movieId);\r\n        setCast(data.cast);\r\n      } catch {\r\n        toast.error('Something wrong!');\r\n      } finally {\r\n        setIsLoading(false);\r\n      }\r\n    };\r\n    fetchCast();\r\n  }, [movieId]);\r\n\r\n  return isLoading ? (\r\n    <Loader />\r\n  ) : (\r\n    !!cast && (\r\n      <ul>\r\n        {cast.map(({ id, name, character, profile_path }) => (\r\n          <CastItem\r\n            key={id}\r\n            name={name}\r\n            character={character}\r\n            imageUrl={\r\n              profile_path ? `${ImgBaseURL}/${profile_path}` : DefaultImage\r\n            }\r\n          />\r\n        ))}\r\n      </ul>\r\n    )\r\n  );\r\n}\r\n","import Axios from 'axios';\r\n\r\nconst API_KEY = 'd3c00761eff125b45afbcd52d8235bc7';\r\nconst BASE_URL = 'https://api.themoviedb.org/3/';\r\n\r\nexport const fetchTrendingMovies = async page => {\r\n  const response = await Axios.get(\r\n    `${BASE_URL}trending/movie/week?api_key=${API_KEY}&page=${page}`,\r\n  );\r\n  return response.data;\r\n};\r\n\r\nexport const fetchMovies = async (query, page) => {\r\n  const response = await Axios.get(\r\n    `${BASE_URL}search/movie?api_key=${API_KEY}&query=${query}&page=${page}`,\r\n  );\r\n\r\n  return response.data;\r\n};\r\n\r\nexport const fetchMoviesById = async id => {\r\n  const response = await Axios.get(`${BASE_URL}movie/${id}?api_key=${API_KEY}`);\r\n\r\n  return response.data;\r\n};\r\n\r\nexport const fetchCastByMovieId = async id => {\r\n  const response = await Axios.get(\r\n    `${BASE_URL}movie/${id}/credits?api_key=${API_KEY}`,\r\n  );\r\n\r\n  return response.data;\r\n};\r\n\r\nexport const fetchReviewsByMovieId = async id => {\r\n  const response = await Axios.get(\r\n    `${BASE_URL}movie/${id}/reviews?api_key=${API_KEY}`,\r\n  );\r\n\r\n  return response.data;\r\n};\r\n"],"names":["Image","styled","Item","Text","Name","Wrapper","CastItem","name","character","imageUrl","src","alt","Cast","useState","cast","setCast","isLoading","setIsLoading","movieId","useParams","useEffect","fetchCast","fetchCastByMovieId","data","toast","Loader","map","id","profile_path","DefaultImage","API_KEY","BASE_URL","fetchTrendingMovies","page","Axios","response","fetchMovies","query","fetchMoviesById","fetchReviewsByMovieId"],"sourceRoot":""}